// Generated by CoffeeScript 1.6.2
(function() {
  var Jsonselect_Cli, fs, jscli, jsonselect, program, should, _;

  jsonselect = require('jsonselect');

  _ = require('underscore');

  should = require('should');

  program = require('commander');

  fs = require('fs');

  module.exports = Jsonselect_Cli = (function() {
    var args, jsonIn, jsonText;

    args = null;

    jsonIn = null;

    jsonText = null;

    function Jsonselect_Cli(selectors, input, output) {
      should.exist(selectors);
      this.args = {};
      this.args.selectors = selectors;
      this.args.input = input ? input : 'stdin';
      this.args.output = output ? output : 'stdout';
    }

    Jsonselect_Cli.prototype.run = function() {
      var err, exist,
        _this = this;

      if (this.args.input !== 'stdin') {
        exist = fs.existsSync(this.args.input);
        exist.should.be["true"];
        try {
          this.jsonIn = JSON.parse(fs.readFileSync(this.args.input));
        } catch (_error) {
          err = _error;
          console.log('Error: malformed JSON');
          return -1;
        }
        return this._apply();
      } else {
        process.stdin.resume();
        process.stdin.setEncoding('utf8');
        this.jsonText = '';
        process.stdin.on('data', function(chunk) {
          if (!chunk.match(/^[ \t\n]*$/g)) {
            try {
              return _this.jsonText += chunk;
            } catch (_error) {
              err = _error;
              console.log('Error: malformed JSON');
              return -1;
            }
          }
        });
        return process.stdin.on('end', function() {
          _this.jsonIn = JSON.parse(_this.jsonText);
          return _this._apply();
        });
      }
    };

    Jsonselect_Cli.prototype._apply = function() {
      var m;

      should.exist(this.jsonIn);
      m = jsonselect.match(this.args.selectors[0], this.jsonIn);
      if (this.args.output === 'stdout') {
        console.log(JSON.stringify(m));
      } else {
        (this.args.output.length > 0).should.be["true"];
        fs.writeFileSync(this.args.output, JSON.stringify(m));
      }
      return 0;
    };

    return Jsonselect_Cli;

  })();

  program.option('-?', 'output usage information').version('0.0.1').usage('<selector> [-f infile] [-o outfile]').option('-f, --file <infile>', 'JSON file').option('-o, --output <outfile>', 'JSON file').parse(process.argv);

  if (program["?"] === true) {
    program.help();
  }

  jscli = new Jsonselect_Cli(program.args, program.file, program.output);

  jscli.run();

}).call(this);
